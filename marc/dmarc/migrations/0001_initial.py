# Generated by Django 5.0.4 on 2024-04-20 18:53

import django.core.validators
import django.db.models.deletion
import marc.dmarc.models
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AuthResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Config",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "recursive",
                    models.BooleanField(
                        default=False,
                        help_text="Look for DMARC reports recursively in directories",
                    ),
                ),
                (
                    "directories",
                    models.TextField(
                        blank=True,
                        help_text="List of directories to look for DMARC reports (one directory by line)",
                        null=True,
                        validators=[marc.dmarc.models.validate_directories],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PolicyEvaluated",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "disposition",
                    models.CharField(
                        choices=[
                            ("none", "None"),
                            ("quarantine", "Quarantine"),
                            ("reject", "Reject"),
                        ],
                        max_length=4096,
                    ),
                ),
                (
                    "dkim",
                    models.CharField(
                        choices=[("pass", "Pass"), ("fail", "Fail")], max_length=4096
                    ),
                ),
                (
                    "spf",
                    models.CharField(
                        choices=[("pass", "Pass"), ("fail", "Fail")], max_length=4096
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DkimAuthResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        help_text="The 'd=' parameter in the signature.",
                        max_length=4096,
                    ),
                ),
                (
                    "selector",
                    models.CharField(
                        blank=True,
                        help_text="The 's=' parameter in the signature.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("none", "None"),
                            ("pass", "Pass"),
                            ("fail", "Fail"),
                            ("policy", "Policy"),
                            ("neutral", "Neutral"),
                            ("temperror", "Temperror"),
                            ("permerror", "Permerror"),
                        ],
                        help_text="The DKIM verification result.",
                        max_length=4096,
                    ),
                ),
                (
                    "human_result",
                    models.CharField(
                        blank=True,
                        help_text="Any extra information (e.g., from Authentication-Results).",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "auth_results",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dkim",
                        to="dmarc.authresult",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Identifier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "envelope_to",
                    models.CharField(
                        blank=True,
                        help_text="The envelope recipient domain.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "envelope_from",
                    models.CharField(
                        blank=True,
                        help_text="RFC5321.MailFrom domain.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "header_from",
                    models.CharField(
                        help_text="The RFC5322.From domain.", max_length=4096
                    ),
                ),
            ],
            options={
                "unique_together": {("envelope_to", "envelope_from", "header_from")},
            },
        ),
        migrations.CreateModel(
            name="PolicyOverrideReason",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type_value",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("forwarded", "Forwarded"),
                            ("sampled_out", "Sampled Out"),
                            ("trusted_forwarder", "Trusted Forwarder"),
                            ("mailing_list", "Mailing List"),
                            ("local_policy", "Local Policy"),
                            ("other", "Other"),
                        ],
                        help_text="Reasons that may affect DMARC disposition or execution thereof.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=4096, null=True)),
                (
                    "policy_evaluated",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reason",
                        to="dmarc.policyevaluated",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PolicyPublished",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        blank=True,
                        help_text="The domain at which the DMARC record was found.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "adkim",
                    models.CharField(
                        blank=True,
                        choices=[("r", "R"), ("s", "S")],
                        help_text="Indicates whether strict or relaxed DKIM Identifier Alignment mode is required by the Domain Owner. In relaxed mode, the Organizational Domains of both the DKIM-authenticated signing domain (taken from the value of the 'd=' tag in the signature) and that of the RFC5322 'From' domain must be equal if the identifiers are to be considered aligned. In strict mode, only an exact match between both of the Fully Qualified Domain Names (FQDNs) is considered to produce Identifier Alignment.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "aspf",
                    models.CharField(
                        blank=True,
                        choices=[("r", "R"), ("s", "S")],
                        help_text="Indicates whether strict or relaxed SPF Identifier Alignment mode is required by theDomain Owner. In relaxed mode, the [SPF]-authenticated domain and RFC5322 'From' domain must have the same Organizational Domain. In strict mode, only an exact DNS domain match is considered to produce Identifier Alignment.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "p",
                    models.CharField(
                        choices=[
                            ("none", "None"),
                            ("quarantine", "Quarantine"),
                            ("reject", "Reject"),
                        ],
                        help_text="Requested Mail Receiver policy. Indicates the policy to be enacted by the Receiver at the request of the Domain Owner. Policy applies to the domain queried and to subdomains, unless subdomain policy is explicitly described using the 'sp' tag. This tag is mandatory for policy records only, but not for third-party reporting records",
                        max_length=4096,
                    ),
                ),
                (
                    "sp",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("quarantine", "Quarantine"),
                            ("reject", "Reject"),
                        ],
                        help_text="Requested Mail Receiver policy for all subdomains. Indicates the policy to be enacted by the Receiver at the request of the Domain Owner. It applies only to subdomains of the domain queried and not to the domain itself.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "pct",
                    models.IntegerField(
                        help_text="Percentage of messages from the Domain Owner's mail stream to which the DMARC policy is to be applied.",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "fo",
                    models.CharField(
                        blank=True,
                        help_text="Failure reporting options.Provides requested options for generation of failure reports. Report generators MAY choose to adhere to the requested options. This tag's content MUST be ignored if a 'ruf' tag is not also specified.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "np",
                    models.CharField(
                        blank=True,
                        help_text="Requested Mail Receiver policy for non-existent subdomains. Indicates the policy to be enacted by the Receiver at the request of the Domain Owner. It applies only to non-existent subdomains of the domain queried and not to either existing subdomains or the domain itself.",
                        max_length=4096,
                        null=True,
                    ),
                ),
            ],
            options={
                "unique_together": {
                    ("domain", "adkim", "aspf", "p", "sp", "pct", "fo", "np")
                },
            },
            bases=(marc.dmarc.models.HelpTextMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "version",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=8, null=True
                    ),
                ),
                (
                    "policy_published",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dmarc.policypublished",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Record",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feedback",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="record",
                        to="dmarc.feedback",
                    ),
                ),
                (
                    "identifiers",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dmarc.identifier",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="authresult",
            name="record",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="auth_results",
                to="dmarc.record",
            ),
        ),
        migrations.CreateModel(
            name="ReportMetadata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("org_name", models.CharField(max_length=4096)),
                ("email", models.CharField(max_length=4096)),
                (
                    "extra_contact_info",
                    models.CharField(blank=True, max_length=4096, null=True),
                ),
                ("report_id", models.CharField(max_length=4096, unique=True)),
                ("date_range_begin", models.DateTimeField()),
                ("date_range_end", models.DateTimeField()),
                ("error", models.JSONField()),
                (
                    "feedback",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="report_metadata",
                        to="dmarc.feedback",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Row",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source_ip",
                    models.GenericIPAddressField(help_text="The connecting IP."),
                ),
                (
                    "count",
                    models.IntegerField(help_text="The number of matching messages."),
                ),
                (
                    "record",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="row",
                        to="dmarc.record",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="policyevaluated",
            name="row",
            field=models.OneToOneField(
                help_text="The DMARC disposition applying to matching messages.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="policy_evaluated",
                to="dmarc.row",
            ),
        ),
        migrations.CreateModel(
            name="SpfAuthResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "domain",
                    models.CharField(help_text="The checked domain.", max_length=4096),
                ),
                (
                    "scope",
                    models.CharField(
                        blank=True,
                        choices=[("helo", "Helo"), ("mfrom", "Mfrom")],
                        help_text="The scope of the checked domain.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("none", "None"),
                            ("neutral", "Neutral"),
                            ("pass", "Pass"),
                            ("fail", "Fail"),
                            ("softfail", "Softfail"),
                            ("temperror", "Temperror"),
                            ("permerror", "Permerror"),
                        ],
                        help_text="The SPF verification result.",
                        max_length=4096,
                    ),
                ),
                (
                    "auth_results",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spf",
                        to="dmarc.authresult",
                    ),
                ),
            ],
        ),
    ]
